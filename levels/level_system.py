import discord
from discord.ext import tasks
import json
import os
import random
from typing import Optional

LEVEL_FILE = "levels/levels.json"


def load_levels():
    if not os.path.exists(LEVEL_FILE):
        with open(LEVEL_FILE, "w") as f:
            json.dump({}, f)
    try:
        with open(LEVEL_FILE, "r") as f:
            return json.load(f)
    except json.JSONDecodeError:
        print("‚ö†Ô∏è levels.json ‡∏û‡∏±‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏á ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï...")
        with open(LEVEL_FILE, "w") as f:
            json.dump({}, f)
        return {}


def save_levels(data):
    with open(LEVEL_FILE, "w") as f:
        json.dump(data, f, indent=4)


def calculate_level(xp):
    level = 0
    while xp >= (level + 1) * 100:
        level += 1
    return level


# üéß Task: Add XP if users are in VC
def create_voice_xp_task(bot):

    @tasks.loop(minutes=1)
    async def voice_xp_task():
        data = load_levels()
        for guild in bot.guilds:
            for vc in guild.voice_channels:
                for member in vc.members:
                    if member.bot:
                        continue
                    user_id = str(member.id)

                    if user_id not in data:
                        data[user_id] = {"xp": 0, "level": 0}

                    data[user_id]["xp"] += 0.1

                    new_level = calculate_level(data[user_id]["xp"])
                    if new_level > data[user_id]["level"]:
                        data[user_id]["level"] = new_level
                        channel = next(
                            (c for c in guild.text_channels
                             if c.permissions_for(guild.me).send_messages),
                            None)
                        if channel:
                            embed = Embed(
                                title="üéß LEVEL UP ‡πÉ‡∏ô VC! üéß",
                                description=
                                f"**{member.mention}** ‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏≠‡∏±‡∏õ‡πÄ‡∏õ‡πá‡∏ô **Level {new_level}** ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Voice Channel! üöÄ",
                                color=discord.Color.blue())
                            embed.set_thumbnail(
                                url=member.avatar.url if member.
                                avatar else member.default_avatar.url)
                            embed.set_footer(
                                text="‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô VC ‡∏Å‡πá‡πÑ‡∏î‡πâ‡πÄ‡∏•‡πÄ‡∏ß‡∏•! ‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å üëç")
                            await channel.send(embed=embed)

        save_levels(data)

    return voice_xp_task


# ‚ú® ‡πÄ‡∏û‡∏¥‡πà‡∏° XP ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°/‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
async def add_xp(member, amount, context_channel=None):
    user_id = str(member.id)
    data = load_levels()

    if user_id not in data:
        data[user_id] = {"xp": 0, "level": 0}

    data[user_id]["xp"] += amount
    new_level = calculate_level(data[user_id]["xp"])

    if new_level > data[user_id]["level"]:
        data[user_id]["level"] = new_level
        if context_channel:
            embed = discord.Embed(
                title="üéâ LEVEL UP! üéâ",
                description=
                f"**{member.mention}** ‡πÑ‡∏î‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡πÄ‡∏õ‡πá‡∏ô\n**Level {new_level}**\n‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏°‡∏≤‡∏Å! üöÄ‚ú®",
                color=discord.Color.gold())
            embed.set_thumbnail(url=member.avatar.url if member.
                                avatar else member.default_avatar.url)
            embed.set_footer(text="‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å! Keep going! üí™")
            await context_channel.send(embed=embed)

    save_levels(data)


# üìä ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏•‡πÄ‡∏ß‡∏•
async def show_level(ctx, member: Optional[discord.Member] = None):
    member = member or ctx.author
    user_id = str(member.id)
    data = load_levels()

    if user_id not in data:
        await ctx.send(f"‚ùå {member.display_name} ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡πÄ‡∏•‡∏¢‡∏ô‡∏∞!")
        return

    xp = data[user_id]["xp"]
    level = data[user_id]["level"]
    next_xp = (level + 1) * 100
    progress = xp / next_xp  # ‡∏Ñ‡πà‡∏≤ progress ‡πÄ‡∏õ‡πá‡∏ô 0-1

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á progress bar ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
    bar_length = 20  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß progress bar
    filled_length = int(bar_length * progress)
    empty_length = bar_length - filled_length
    bar = "‚ñà" * filled_length + "‚ñë" * empty_length
    percent = int(progress * 100)

    embed = discord.Embed(
        title=f"üìä ‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏Ç‡∏≠‡∏á {member.display_name}",
        description=
        f"‚≠ê **Level:** {level}\n‚ú® **XP:** {xp} / {next_xp} ({percent}%)",
        color=0xFFC0CB)

    embed.set_thumbnail(
        url=member.avatar.url if member.avatar else member.default_avatar.url)

    embed.add_field(name="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á XP", value=f"`{bar}`", inline=False)

    embed.set_footer(text="‡∏Ç‡∏¢‡∏±‡∏ô‡πÄ‡∏Å‡πá‡∏ö XP ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡πÄ‡∏£‡πá‡∏ß‡πÜ ‡∏ô‡∏∞!")

    await ctx.send(embed=embed)


def get_leaderboard(top=5):
    data = load_levels()
    sorted_users = sorted(data.items(),
                          key=lambda x: (x[1]['level'], x[1]['xp']),
                          reverse=True)
    return sorted_users[:top]
