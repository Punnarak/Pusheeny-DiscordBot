import discord
from discord.ext import commands, tasks
# import aiohttp
import random
import os
from . import common_pokemon_util as cpu

from .catch_pokemon import add_pokemon_to_user  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ util ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå catch_pokemon

CHANNEL_ID = int(os.environ['CHANNEL_ID'])


class EventCatchView(discord.ui.View):

    def __init__(self, bot, pokemon, on_catch_callback):
        super().__init__(timeout=60)
        self.bot = bot
        self.pokemon = pokemon
        self.caught = False
        self.on_catch_callback = on_catch_callback

    @discord.ui.button(label="‡∏à‡∏±‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏Ñ‡∏£!", style=discord.ButtonStyle.green)
    async def catch_first(self, interaction: discord.Interaction,
                          button: discord.ui.Button):
        if self.caught:
            await interaction.response.send_message("‚õî ‡∏°‡∏µ‡∏Ñ‡∏ô‡∏à‡∏±‡∏ö‡πÇ‡∏õ‡πÄ‡∏Å‡∏°‡∏≠‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß!",
                                                    ephemeral=True)
            return

        added = add_pokemon_to_user(interaction.user.id, self.pokemon)
        shiny_text = "‚ú® Shiny ‚ú®" if self.pokemon['shiny'] else ""

        if added:
            self.caught = True
            
            await interaction.response.edit_message(
                content=
                f"üéâ {interaction.user.mention} ‡∏à‡∏±‡∏ö {self.pokemon['name']} {shiny_text} ‡πÑ‡∏î‡πâ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏Ñ‡∏£! {self.pokemon['leg_or_myth']} üèÜ",
                view=None)
            await self.on_catch_callback()
        else:
            await interaction.response.send_message(
                "üì¶ ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡πÇ‡∏õ‡πÄ‡∏Å‡∏°‡∏≠‡∏ô‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß!", ephemeral=True)

        self.stop()


class EventPokemon(commands.Cog):

    def __init__(self, bot):
        self.bot = bot
        self.spawn_loop.start()

    async def spawn_pokemon_event(self):
        channel_id = CHANNEL_ID
        channel = self.bot.get_channel(channel_id)
        if not channel:
            print("Channel not found")
            return
        pokemon_data = await cpu.fetch_pokemon_data()
        if not pokemon_data:
            return

        shiny_text = "‚ú® Shiny ‚ú®" if pokemon_data["shiny"] else ""

        embed = discord.Embed(
            title="‡πÇ‡∏õ‡πÄ‡∏Å‡∏°‡∏≠‡∏ô‡∏õ‡πà‡∏≤‡πÇ‡∏ú‡∏•‡πà‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß!",
            description=
            f"‡πÉ‡∏Ñ‡∏£‡∏à‡∏∞‡∏à‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏Å‡πà‡∏≠‡∏ô!?\n{pokemon_data['name']} {shiny_text} {pokemon_data['leg_or_myth']}\n‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: {pokemon_data['types']}",
            color=discord.Color.random())
        embed.set_thumbnail(url=pokemon_data['sprite'])
        async def dummy_callback():
            pass

        view = EventCatchView(self.bot, pokemon_data, dummy_callback)
        await channel.send(embed=embed, view=view)

    @tasks.loop(minutes=1)
    async def spawn_loop(self):
        # ‡∏™‡∏∏‡πà‡∏° 50% ‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ô‡∏±‡πâ‡∏ô
        rand = random.random()
        # print(f"Random value: {rand}")
        if rand < 0.5:
            await self.spawn_pokemon_event()

    @spawn_loop.before_loop
    async def before_loop(self):
        await self.bot.wait_until_ready()


async def setup(bot):
    await bot.add_cog(EventPokemon(bot))
